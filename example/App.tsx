/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { useState, useEffect, useCallback } from 'react';
import {
  StyleSheet,
  Text,
  TextInput,
  View,
  Button,
  NativeModules,
  Alert,
  Switch,
  ScrollView,
  PermissionsAndroid,
  NativeEventEmitter,
} from 'react-native';
import { sha512 } from 'js-sha512';

const { PayUBizSdk } = NativeModules;

interface CartDetail {
  [key: string]: string;
}

interface PaymentMode {
  [key: string]: string;
}

const App: React.FC = () => {
  const [key, setKey] = useState<string>('gtKFFx');
  const [amount, setAmount] = useState<string>('10');
  const [productInfo] = useState<string>('productInfo');
  const [firstName] = useState<string>('firstName');
  const [email, setEmail] = useState<string>('test@gmail.com');
  const [phone] = useState<string>('9999999999');
  const [ios_surl] = useState<string>('https://cbjs.payu.in/sdk/success');
  const [ios_furl] = useState<string>('https://cbjs.payu.in/sdk/failure');
  const [environment, setEnvironment] = useState<string>('1');
  const [android_surl] = useState<string>('https://cbjs.payu.in/sdk/success');
  const [android_furl] = useState<string>('https://cbjs.payu.in/sdk/failure');
  const [udf1, setUdf1] = useState<string>('udf1');
  const [udf2, setUdf2] = useState<string>('udf2');
  const [udf3, setUdf3] = useState<string>('udf3');
  const [udf4, setUdf4] = useState<string>('udf4');
  const [udf5, setUdf5] = useState<string>('udf5');
  const [merchantSalt, setMerchantSalt] = useState<string>('1b1b0');
  const [userCredential, setUserCredential] = useState<string>('umang:arya');
  const [enableSI, setEnableSI] = useState<boolean>(false);
  const [primaryColor] = useState<string>('#aabbcc');
  const [secondaryColor] = useState<string>('#000000');
  const [merchantName, setMerchantName] = useState<string>('Rashan vala');
  const [merchantLogo] = useState<string>('Jio');
  const [showExitConfirmationOnCheckoutScreen] = useState<boolean>(true);
  const [showExitConfirmationOnPaymentScreen] = useState<boolean>(true);
  const [cartDetails] = useState<CartDetail[]>([{ Order: 'Value' }, { 'Key Name': 'Value1' }]);
  const [paymentModesOrder] = useState<PaymentMode[]>([{ UPI: 'TEZ' }, { Wallets: 'PAYTM' }, { EMI: '' }, { Wallets: 'PHONEPE' }]);
  const [surePayCount, setSurePayCount] = useState<number>(1);
  const [merchantResponseTimeout, setMerchantResponseTimeout] = useState<number>(10000);
  const [autoSelectOtp, setAutoSelectOtp] = useState<boolean>(true);
  const [enforcePaymentEnable, setEnforcePaymentEnable] = useState<boolean>(false);
  const [showCbToolbar] = useState<boolean>(true);
  const [autoApprove, setAutoApprove] = useState<boolean>(false);
  const [merchantSMSPermission, setMerchantSMSPermission] = useState<boolean>(false);
  const [showAlert, setShowAlert] = useState<boolean>(false);

  const displayAlert = useCallback((title: string, value: string) => {
    if (showAlert === false) {
      setShowAlert(true);
      Alert.alert(title, value);
      setShowAlert(false);
    }
  }, [showAlert]);
  const toggleAutoApproveOTP = (value: boolean) => {
    setAutoApprove(value);
  };

  const toggleEnableSI = (value: boolean) => {
    setEnableSI(value);
  };

  const toggleSelectOTP = (value: boolean) => {
    setAutoSelectOtp(value);
  };

  const toggleEnforcePaymentEnable = (value: boolean) => {
    setEnforcePaymentEnable(value);
  };

  const togglePermission = (value: boolean) => {
    setMerchantSMSPermission(value);
    requestSMSPermission();
  };

  const requestSMSPermission = async () => {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.RECEIVE_SMS,
        {
          title: 'Sample App SMS Permission',
          message:
            'Sample App needs access to your sms to autofill OTP on Bank Pages ',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        },
      );
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        console.log('SMS Permission Granted!');
      } else {
        console.log('SMS Permission Denied');
      }
    } catch (err) {
      console.warn(err);
    }
  };

  //Register eventEmitters here
  useEffect(() => {
    const eventEmitter = new NativeEventEmitter(PayUBizSdk);

    const payUOnPaymentSuccess = eventEmitter.addListener(
      'onPaymentSuccess',
      onPaymentSuccess,
    );
    const payUOnPaymentFailure = eventEmitter.addListener(
      'onPaymentFailure',
      onPaymentFailure,
    );
    const payUOnPaymentCancel = eventEmitter.addListener(
      'onPaymentCancel',
      onPaymentCancel,
    );
    const payUOnError = eventEmitter.addListener('onError', onError);
    const payUGenerateHash = eventEmitter.addListener('generateHash', generateHash);
    //Unregister eventEmitters here
    return () => {
      console.log('Unsubscribed!!!!');
      payUOnPaymentSuccess.remove();
      payUOnPaymentFailure.remove();
      payUOnPaymentCancel.remove();
      payUOnError.remove();
      payUGenerateHash.remove();
    };
  }, []);

  const onPaymentSuccess = useCallback((e: any) => {
    console.log(e.merchantResponse);
    console.log(e.payuResponse);
    displayAlert('onPaymentSuccess', JSON.stringify(e));
  }, [displayAlert]);

  const onPaymentFailure = useCallback((e: any) => {
    console.log(e);
    console.log(e.merchantResponse);
    console.log(e.payuResponse);
    displayAlert('onPaymentFailure', JSON.stringify(e));
  }, [displayAlert]);
  const onPaymentCancel = (e: any) => {
    console.log('onPaymentCancel isTxnInitiated -' + e);
    displayAlert('onPaymentCancel', JSON.stringify(e));
  };
  const onError = (e: any) => {
    console.log(e);
    displayAlert('onError', JSON.stringify(e));
  };
  const generateHash = (e: any) => {
    console.log(e.hashName);
    console.log(e.hashString);
    sendBackHash(e.hashName, e.hashString + merchantSalt);
  };
  const createPaymentParams = () => {
    var txnid = new Date().getTime().toString();
    console.log(
      'AutoSelectOtp: ' +
      autoSelectOtp +
      'MerchantSmsPermission: ' +
      merchantSMSPermission,
    );
    var payUPaymentParams = {
      key: key,
      transactionId: txnid,
      amount: amount,
      productInfo: productInfo,
      firstName: firstName,
      email: email,
      phone: phone,
      ios_surl: ios_surl,
      ios_furl: ios_furl,
      android_surl: android_surl,
      android_furl: android_furl,
      environment: environment,
      userCredential: userCredential,
      additionalParam: {
        udf1: udf1,
        udf2: udf2,
        udf3: udf3,
        udf4: udf4,
        udf5: udf5,
        walletUrn: '100000',
      },
    };
    var siParamObject = {
      isFreeTrial: true,
      billingAmount: '10',
      billingInterval: '1',
      paymentStartDate: '2024-05-20',
      paymentEndDate: '2025-04-30',
      billingCycle: 'DAILY', //Can be any of 'daily','weekly','yearly','adhoc','once','monthly'
      remarks: 'Test SI transcaction',
      billingCurrency: 'INR',
    };
    if (enableSI) {
      console.log('Inside enableSI');
      payUPaymentParams.payUSIParams = siParamObject;
    }

    var payUCheckoutProConfig = {
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      merchantName: merchantName,
      merchantLogo: merchantLogo,
      showExitConfirmationOnCheckoutScreen:
        showExitConfirmationOnCheckoutScreen,
      showExitConfirmationOnPaymentScreen: showExitConfirmationOnPaymentScreen,
      cartDetails: cartDetails,
      paymentModesOrder: paymentModesOrder,
      surePayCount: surePayCount,
      merchantResponseTimeout: merchantResponseTimeout,
      autoSelectOtp: autoSelectOtp,
      // Android specific property
      autoApprove: autoApprove,
      merchantSMSPermission: merchantSMSPermission,
      showCbToolbar: showCbToolbar,
    };
    if (enforcePaymentEnable) {
      payUCheckoutProConfig.enforcePaymentList = [
        { payment_type: 'NB' },
        { payment_type: 'CARD' },
      ];
    }

    return {
      payUPaymentParams: payUPaymentParams,
      payUCheckoutProConfig: payUCheckoutProConfig,
    };
  };
  //Used to send back hash generated to SDK
  const sendBackHash = (hashName: string, hashData: string) => {
    console.log(hashName);
    var hashValue = calculateHash(hashData);
    var result = { [hashName]: hashValue };
    console.log(result);
    PayUBizSdk.hashGenerated(result);
  };
  const calculateHash = (data: string) => {
    console.log(data);
    var result = sha512(data);
    console.log(result);
    return result;
  };
  const launchPayU = () => {
    console.log('Method launched amount =' + amount);
    PayUBizSdk.openCheckoutScreen(createPaymentParams());
  };
  return (
    <ScrollView>
      <View>
        <Text style={styles.welcome}>☆ PayUCheckoutPro ☆{'\n'}Sample App</Text>
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Merchant Key</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={key}
          onChangeText={(text) => {
            setKey(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Merchant Salt</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={merchantSalt}
          onChangeText={(text) => {
            setMerchantSalt(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Environment</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={environment}
          onChangeText={(text) => {
            setEnvironment(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Enter Transcation{'\n'}Amount</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={amount}
          onChangeText={(text) => {
            setAmount(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Email</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={email}
          onChangeText={(text) => {
            setEmail(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>User Credential</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={userCredential}
          onChangeText={(text) => {
            setUserCredential(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>UDF1</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={udf1}
          onChangeText={(text) => {
            setUdf1(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>UDF2</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={udf2}
          onChangeText={(text) => {
            setUdf2(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>UDF3</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={udf3}
          onChangeText={(text) => {
            setUdf3(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>UDF4</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={udf4}
          onChangeText={(text) => {
            setUdf4(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>UDF5</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={udf5}
          onChangeText={(text) => {
            setUdf5(text);
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Merchant Surl/Furl{'\n'}Timeout</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={String(merchantResponseTimeout)}
          onChangeText={(text) => {
            setMerchantResponseTimeout(parseInt(text));
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Auto Select Otp</Text>
        <Switch
          style={styles.valuesSwitch}
          value={autoSelectOtp}
          onValueChange={toggleSelectOTP}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Enable enforce{'\n'}Payment</Text>
        <Switch
          style={styles.valuesSwitch}
          value={enforcePaymentEnable}
          onValueChange={toggleEnforcePaymentEnable}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>SMS Permission</Text>
        <Switch
          style={styles.valuesSwitch}
          value={merchantSMSPermission}
          onValueChange={togglePermission}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Auto Approve Otp</Text>
        <Switch
          style={styles.valuesSwitch}
          value={autoApprove}
          onValueChange={toggleAutoApproveOTP}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Enable SI</Text>
        <Switch
          style={styles.valuesSwitch}
          value={enableSI}
          onValueChange={toggleEnableSI}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>SurePay (0-3)</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={String(surePayCount)}
          onChangeText={(text) => {
            setSurePayCount(parseInt(text));
          }}
        />
      </View>
      <View style={styles.cell}>
        <Text style={styles.category}>Merchant Name</Text>
        <TextInput
          style={styles.valuesTextInput}
          defaultValue={merchantName}
          onChangeText={(text) => {
            setMerchantName(text);
          }}
        />
      </View>
      <Button
        title={'Pay Now'}
        onPress={() => {
          launchPayU();
        }}
      />
    </ScrollView>
  );
};

export default App;
const styles = StyleSheet.create({
  contentContainerStyle: {
    flex: 2,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
    marginTop: 50,
    marginBottom: 20,
    padding: 10,
    backgroundColor: '#6495DD',
    fontWeight: 'bold',
  },
  category: {
    fontSize: 14,
    textAlign: 'left',
    fontWeight: 'bold',
  },
  values: {
    fontSize: 14,
    textAlign: 'right',
  },
  valuesTextInput: {
    fontSize: 14,
    textAlign: 'right',
    width: 180,
    borderWidth: 0.5,
    borderRadius: 5,
    padding: 10,
    backgroundColor: '#F2F3F4',
  },
  valuesSwitch: {
    height: 14,
    // fontSize: 14,
    // textAlign: 'right',
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
  cell: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    margin: 10,
  },
});
